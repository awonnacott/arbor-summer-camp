---
const { class: className } = Astro.props;
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";
import CustomButton from "@components/global/CustomButton.astro";
import RickiImage from "@assets/images/instructors/ricki_asc.png";
import { MailIcon } from "@lucide/astro";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<section id="custom-question" class="section bg-forest-50 text-forest-950 py-16">
  <div class="wrapper w-full">
    <div class="mx-auto max-w-3xl lg:max-w-5xl px-4">
      <div class="flex flex-col lg:flex-row gap-8 items-center lg:items-start">
        <div class="flex-1">
          <h2 class="mb-4 font-display text-3xl font-bold md:text-4xl">More questions?</h2>
          <p class="mb-8">ASC us anything ;)</p>
          
          <div class="flex flex-col lg:flex-row gap-8">
            <div class="rounded-lg w-full max-w-3xl">
              <form id="customQuestionForm" class="space-y-4">
                <div class="flex flex-col gap-4">
                  
                  <input
                    type="text"
                    id="fullName"
                    name="fullName"
                    placeholder="Name"
                    class="w-full px-4 py-2 rounded-lg border border-forest-200 focus:border-forest-700 focus:outline-none transition-colors text-black"
                  />

                  <input
                  type="email"
                  id="email"
                  name="email"
                  placeholder="Email"
                  class="w-full px-4 py-2 text-sm sm:text-base rounded-lg border border-forest-200 focus:border-forest-700 focus:outline-none transition-colors text-black"
                  required
                  />

                  <textarea
                    id="questions"
                    name="questions"
                    placeholder="What would you like to know?"
                    rows="3"
                    class="w-full px-4 py-2 rounded-lg border border-forest-200 focus:border-forest-700 focus:outline-none transition-colors resize-none text-black"
                  ></textarea>
                  
                  <CustomButton type="submit" id="submitButton" class="bg-forest-800 text-sm sm:text-base whitespace-normal sm:whitespace-nowrap">
                    Submit Question
                  </CustomButton>
                </div>
              </form>
            </div>
          </div>
          
          <div id="customNotification" class="opacity-0 transform translate-y-4 transition-all duration-500 mt-4">
            <div class="bg-gradient-to-r from-secondary to-success text-secondary-content p-4 rounded-lg shadow-lg">
              <div class="flex items-center justify-center">
                <div class="flex-shrink-0 mr-3">
                  <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <p class="text-sm font-medium">
                  Thanks for your question! We'll get back to you soon.
                </p>
              </div>
            </div>
          </div>
        </div>
        
        <div class="hidden lg:flex flex-col items-center flex-shrink-0 self-stretch group">
          <a href="mailto:ricki@trading.camp" class="transition-transform duration-300 group-hover:scale-105 cursor-pointer">
            <img 
              src={RickiImage.src} 
              alt="Instructor Ricki" 
              class="w-72 h-auto mb-4"
            />
            <div class="group-hover:flex w-full justify-center hidden gap-2 items-center">
              <MailIcon class="w-4 h-4" stroke-width={2} />
              <span>ricki@trading.camp</span>
            </div>
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from "gsap";

  const form = document.getElementById('customQuestionForm') as HTMLFormElement;
  let fieldOptions: Record<string, string[]> = {};

  async function fetchFieldOptions() {
    const AIRTABLE_API_KEY = import.meta.env.PUBLIC_AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = import.meta.env.PUBLIC_AIRTABLE_BASE_ID;
    const TABLE_NAME = 'Interest List Website';

    try {
      const schemaResponse = await fetch(
        `https://api.airtable.com/v0/meta/bases/${AIRTABLE_BASE_ID}/tables`,
        {
          headers: {
            'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
            'Content-Type': 'application/json'
          }
        }
      );

      const schemaData = await schemaResponse.json();

      if (!schemaResponse.ok) {
        throw new Error(`Schema fetch failed: ${schemaData.error?.message}`);
      }

      const table = schemaData.tables.find((t: any) => t.name === TABLE_NAME);
      
      if (table) {
        table.fields.forEach((field: any) => {
          if (field.type === 'multipleSelects' || field.type === 'singleSelect') {
            fieldOptions[field.name] = field.options.choices.map((c: any) => c.name);
          }
        });
      }
    } catch (error) {
      console.error('Error fetching field options:', error);
    }
  }

  async function submitToAirtable(formData: FormData) {
    const AIRTABLE_API_KEY = import.meta.env.PUBLIC_AIRTABLE_API_KEY;
    const AIRTABLE_BASE_ID = import.meta.env.PUBLIC_AIRTABLE_BASE_ID;
    const TABLE_NAME = 'SC Interest Form Output';

    try {
      const url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${TABLE_NAME}`;
      const fields: Record<string, any> = {};

      fields['Email'] = formData.get('email');
      
      const fullName = formData.get('fullName');
      if (fullName) fields['Full Name'] = fullName;

      const questions = formData.get('questions');
      if (questions) fields['Questions'] = questions;

      for (const [fieldName, options] of Object.entries(fieldOptions)) {
        const value = formData.get(fieldName);
        if (value && options.includes(value as string)) {
          fields[fieldName] = value;
        }
      }

      const body = { records: [{ fields }] };

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${AIRTABLE_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(`Failed to submit: ${responseData.error?.message || 'Unknown error'}`);
      }
      
      return true;
    } catch (error) {
      console.error('Error submitting to Airtable:', error);
      return false;
    }
  }

  function showNotification() {
    const notification = document.getElementById('customNotification');
    if (notification) {
      // Reset any previous animation
      gsap.set(notification, {
        clearProps: "all",
        opacity: 0,
        y: 20
      });

      // Animate in
      gsap.to(notification, {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: "back.out(1.7)"
      });

      // Animate out after 3 seconds
      gsap.to(notification, {
        opacity: 0,
        y: 20,
        duration: 0.5,
        ease: "power2.in",
        delay: 3
      });
    }
  }

  // Add auto-resize functionality to textarea
  const textarea = document.getElementById('questions') as HTMLTextAreaElement;
  if (textarea) {
    const adjustHeight = () => {
      textarea.style.height = 'auto';
      textarea.style.height = textarea.scrollHeight + 'px';
    };

    textarea.addEventListener('input', adjustHeight);
    window.addEventListener('resize', adjustHeight);
  }

  // Form submission handler
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    
    // Fetch field options if not already fetched
    if (Object.keys(fieldOptions).length === 0) {
      await fetchFieldOptions();
    }
    
    const success = await submitToAirtable(formData);
    if (success) {
      showNotification();
      (form as HTMLFormElement).reset();
    } else {
      alert('There was an error submitting your question. Please try again.');
    }
  });
</script> 